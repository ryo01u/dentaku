// Generated by CoffeeScript 1.7.1
(function() {
  var ac, after, before, cl, dt, fo, ip, ip_bln, operator, pm, result;
  before = null;
  after = 0;
  operator = null;
  result = document.getElementById("result");
  ip_bln = false;
  ip = function(n) {
    after = !ip_bln ? 0 : after;
    if (after.length > 16) {
      return;
    }
    if (n === "00") {
      ip("0");
      ip("0");
      return;
    } else if (after.toString() === "0") {
      after = n.toString();
    } else {
      after = after.toString() + n.toString();
      after = after.indexOf(".") < 0 ? parseInt(after) : parseFloat(after);
      after = after.toString();
    }
    ip_bln = true;
    return result.innerHTML = after.toString();
  };
  dt = function() {
    after = !ip_bln ? 0 : after;
    if (after.toString().indexOf(".") < 0) {
      after = after + ".";
      ip_bln = true;
      return result.innerHTML = after.toString();
    }
  };
  fo = function(o, b, a) {
    var r;
    r = null;
    if (o === "pl") {
      r = new BigNumber(b).plus(a).toPrecision();
    } else if (o === "sb") {
      r = new BigNumber(b).sub(a).toPrecision();
    } else if (o === "ml") {
      r = new BigNumber(b).times(a).toPrecision();
    } else if (o === "dv") {
      r = new BigNumber(b).div(a).toPrecision();
    } else if (o === "eq") {
      r = a;
    }
    if (r > 999999999999999) {
      r = "ERR";
    }
    r = r.toString().substring(0, 16);
    return r;
  };
  cl = function(o) {
    var r;
    if (!ip_bln) {
      operator = o;
      return;
    }
    r = null;
    after = after.toString();
    after = after.indexOf(".") < 0 ? parseInt(after) : parseFloat(after);
    if (before === null && !operator) {
      r = after;
    } else {
      r = fo(operator, before, after);
    }
    result.innerHTML = r.toString();
    operator = o;
    after = r;
    before = r;
    ip_bln = false;
  };
  pm = function() {
    after = after.indexOf(".") < 0 ? parseInt(after) : parseFloat(after);
    console.log(after);
    after = ((new BigNumber(after).toNumber().toPrecision()) * -1).toString();
    return result.innerHTML = after.toString();
  };
  ac = function() {
    after = 0;
    before = null;
    operator = null;
    result.innerHTML = after.toString();
  };
  document.getElementById("b01").addEventListener("click", function() {
    return ip("1");
  });
  document.getElementById("b02").addEventListener("click", function() {
    return ip("2");
  });
  document.getElementById("b03").addEventListener("click", function() {
    return ip("3");
  });
  document.getElementById("b04").addEventListener("click", function() {
    return ip("4");
  });
  document.getElementById("b05").addEventListener("click", function() {
    return ip("5");
  });
  document.getElementById("b06").addEventListener("click", function() {
    return ip("6");
  });
  document.getElementById("b07").addEventListener("click", function() {
    return ip("7");
  });
  document.getElementById("b08").addEventListener("click", function() {
    return ip("8");
  });
  document.getElementById("b09").addEventListener("click", function() {
    return ip("9");
  });
  document.getElementById("b00").addEventListener("click", function() {
    return ip("0");
  });
  document.getElementById("bzz").addEventListener("click", function() {
    return ip("00");
  });
  document.getElementById("bdt").addEventListener("click", function() {
    return dt();
  });
  document.getElementById("bpl").addEventListener("click", function() {
    return cl("pl");
  });
  document.getElementById("bsb").addEventListener("click", function() {
    return cl("sb");
  });
  document.getElementById("bml").addEventListener("click", function() {
    return cl("ml");
  });
  document.getElementById("bdv").addEventListener("click", function() {
    return cl("dv");
  });
  document.getElementById("beq").addEventListener("click", function() {
    return cl("eq");
  });
  document.getElementById("bpm").addEventListener("click", function() {
    return pm();
  });
  document.getElementById("bac").addEventListener("click", function() {
    return ac();
  });
})();
